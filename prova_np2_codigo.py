"""
prova_np2_codigo.py

Script para leitura e extra√ß√£o de dados estruturados do documento "Prova NP2 - Cat√°logo de Destinos - PyTravel.docx",
organiza√ß√£o em listas e gera√ß√£o de novas categorias por correla√ß√£o.
"""

import time
import re
from docx import Document

def extrair_listas_por_secao(caminho_docx):
    """
    L√™ o arquivo Word especificado e extrai 6 listas principais conforme se√ß√µes:
      - Destinos para Cidades Praianas
      - Destinos de Cidades Capitais
      - Destinos de Cidades Interiorana
      - Pacotes de Avi√£o
      - Pacotes de √înibus
      - Pacotes de Navio

    Retorna um dicion√°rio com as listas correspondentes.
    """
    doc = Document(caminho_docx)

    # Mapeamento do texto exato dos t√≠tulos para chaves internas
    titulos_secoes = {
        'üå¥ Destinos para Cidades Praianas': 'praias',
        'üèôÔ∏è Destinos para Cidades Capitais': 'capitais',
        'üåÑ Destinos para Cidades Interiorana': 'interior',
        '‚úàÔ∏è Pacotes de Avi√£o': 'aviao',
        'üöå Pacotes de √înibus': 'onibus',
        'üö¢ Pacotes de Navio': 'navio'
    }

    # Inicializa dicion√°rio com listas vazias
    secoes = {
        'praias': [],
        'capitais': [],
        'interior': [],
        'aviao': [],
        'onibus': [],
        'navio': []
    }

    current_section = None       # chave atual (ex: 'praias', 'capitais', etc)
    coletando = False            # flag que indica se devemos coletar nomes de cidades

    for paragrafo in doc.paragraphs:
        texto = paragrafo.text.strip()

        # 1. Verifica se o par√°grafo corresponde a um t√≠tulo de se√ß√£o
        if texto in titulos_secoes:
            current_section = titulos_secoes[texto]
            coletando = False
            continue

        # 2. Se j√° identificamos a se√ß√£o e ainda n√£o come√ßamos a coletar, 
        #    procuramos a linha que inicia com "Cidades"
        if current_section and not coletando:
            # Em Pacotes de Avi√£o, √înibus e Navio, o prefixo √© ligeiramente diferente,
            # mas todos come√ßam com "Cidades" em min√∫sculo ou mai√∫sculo.
            if re.match(r'^(Cidades)', texto, re.IGNORECASE):
                coletando = True
            continue

        # 3. Se estivermos no modo de coleta, registramos cada linha n√£o vazia
        if coletando:
            # Caso encontre linha em branco, encerra coleta desta se√ß√£o
            if texto == '':
                coletando = False
                current_section = None
                continue

            # Caso a linha contenha um novo t√≠tulo de se√ß√£o, interrompe coleta
            if texto in titulos_secoes:
                coletando = False
                current_section = titulos_secoes[texto]
                continue

            # Caso contr√°rio, adiciona o texto (nome da cidade) √† lista apropriada
            secoes[current_section].append(texto)

    return secoes

def gerar_novas_categorias(listas):
    """
    Recebe um dicion√°rio com as 6 listas principais e gera novas categorias por correla√ß√£o:
      - Capitais que s√£o cidades praianas
      - Destinos de praias com pacotes de √¥nibus
      - Cidades do interior com pacote de avi√£o
      - Cidades com rotas de navio que tamb√©m s√£o capitais

    Retorna um dicion√°rio com essas novas categorias.
    """
    # Converte cada lista principal em conjunto para facilitar interse√ß√µes
    set_praias   = set(listas['praias'])
    set_capitais = set(listas['capitais'])
    set_interior = set(listas['interior'])
    set_aviao    = set(listas['aviao'])
    set_onibus   = set(listas['onibus'])
    set_navio    = set(listas['navio'])

    # 1. Capitais que s√£o cidades praianas
    capitais_praianas = sorted(list(set_capitais & set_praias))

    # 2. Destinos de praias com pacotes de √¥nibus
    praias_onibus = sorted(list(set_praias & set_onibus))

    # 3. Cidades do interior com pacote de avi√£o (caso haja)
    interior_aviao = sorted(list(set_interior & set_aviao))

    # 4. Cidades com rotas de navio que tamb√©m s√£o capitais
    capitais_navio = sorted(list(set_navio & set_capitais))

    novas = {
        'capitais_praianas': capitais_praianas,
        'praias_onibus': praias_onibus,
        'interior_aviao': interior_aviao,
        'capitais_navio': capitais_navio
    }

    return novas

def main():
    """
    Fun√ß√£o principal:
      - Registra timestamps de cada etapa
      - Executa a extra√ß√£o das listas
      - Gera as novas categorias por correla√ß√£o
      - Exibe resultados e tempos de execu√ß√£o
    """
    caminho_arquivo = 'Cat√°logo de Destinos - PyTravel - Prof. Sandro Mesquita.docx'

    # --- In√≠cio do cron√¥metro geral ---
    inicio_total = time.time()

    # Leitura e extra√ß√£o das listas principais
    inicio_extracao = time.time()
    listas_principais = extrair_listas_por_secao(caminho_arquivo)
    fim_extracao = time.time()

    # Gera√ß√£o de novas categorias (correla√ß√µes)
    inicio_correlacao = time.time()
    novas_categorias = gerar_novas_categorias(listas_principais)
    fim_correlacao = time.time()

    # --- Fim do cron√¥metro geral ---
    fim_total = time.time()

    # Apresenta as listas principais
    print("\n--- Listas Principais Extra√≠das ---")
    print(f"1. Destinos para Cidades Praianas ({len(listas_principais['praias'])} itens):")
    for cidade in listas_principais['praias']:
        print(f"   - {cidade}")

    print(f"\n2. Destinos para Cidades Capitais ({len(listas_principais['capitais'])} itens):")
    for cidade in listas_principais['capitais']:
        print(f"   - {cidade}")

    print(f"\n3. Destinos para Cidades Interiorana ({len(listas_principais['interior'])} itens):")
    for cidade in listas_principais['interior']:
        print(f"   - {cidade}")

    print(f"\n4. Pacotes de Avi√£o ({len(listas_principais['aviao'])} itens):")
    for cidade in listas_principais['aviao']:
        print(f"   - {cidade}")

    print(f"\n5. Pacotes de √înibus ({len(listas_principais['onibus'])} itens):")
    for cidade in listas_principais['onibus']:
        print(f"   - {cidade}")

    print(f"\n6. Pacotes de Navio ({len(listas_principais['navio'])} itens):")
    for cidade in listas_principais['navio']:
        print(f"   - {cidade}")

    # Apresenta as novas categorias
    print("\n--- Novas Categorias Geradas ---")
    print(f"‚Ä¢ Capitais que s√£o cidades praianas ({len(novas_categorias['capitais_praianas'])}):")
    for cidade in novas_categorias['capitais_praianas']:
        print(f"   - {cidade}")

    print(f"\n‚Ä¢ Destinos de praias com pacotes de √¥nibus ({len(novas_categorias['praias_onibus'])}):")
    for cidade in novas_categorias['praias_onibus']:
        print(f"   - {cidade}")

    print(f"\n‚Ä¢ Cidades do interior com pacote de avi√£o ({len(novas_categorias['interior_aviao'])}):")
    if novas_categorias['interior_aviao']:
        for cidade in novas_categorias['interior_aviao']:
            print(f"   - {cidade}")
    else:
        print("   Nenhuma cidade do interior possui pacote de avi√£o.")

    print(f"\n‚Ä¢ Cidades com rotas de navio que tamb√©m s√£o capitais ({len(novas_categorias['capitais_navio'])}):")
    if novas_categorias['capitais_navio']:
        for cidade in novas_categorias['capitais_navio']:
            print(f"   - {cidade}")
    else:
        print("   Nenhuma capital possui rota de navio listada.")

    # Exibe tempos de execu√ß√£o
    tempo_extracao   = fim_extracao - inicio_extracao
    tempo_correlacao = fim_correlacao - inicio_correlacao
    tempo_total      = fim_total - inicio_total

    print("\n--- Tempos de Execu√ß√£o (em segundos) ---")
    print(f"Tempo para extra√ß√£o das listas principais: {tempo_extracao:.4f}s")
    print(f"Tempo para gera√ß√£o das novas categorias: {tempo_correlacao:.4f}s")
    print(f"Tempo total de execu√ß√£o: {tempo_total:.4f}s\n")

if __name__ == '__main__':
    main()
